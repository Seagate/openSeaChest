name: CI for meson build

on:
  push:
    branches: [ develop, master, release/*, feature/* ]
    tags: [ v* ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false # so that if one config fails, other won't be cancelled automatically
      matrix:
        config:
        - {
            name: "Windows MSVC x64",
            os: windows-latest,
            cc: "cl.exe",
            cxx: "cl.exe",
            arch: "x64",
            publish_release: true,
            release_name: "win-x64",
            release_extension: ".zip",
            archive_command: "7z a -tzip -mmt"
          }
        - {
            name: "Windows MSVC x86",
            os: windows-latest,
            cc: "cl.exe",
            cxx: "cl.exe",
            arch: "x64_x86",
            publish_release: true,
            release_name: "win-x86",
            release_extension: ".zip",
            archive_command: "7z a -tzip -mmt"
          }
        - {
            name: "Windows GCC",
            os: windows-latest,
            cc: "gcc.exe",
            cxx: "g++.exe",
          }
        - {
            name: "Windows Clang",
            os: windows-latest,
            cc: "clang.exe",
            cxx: "clang++.exe",
          }
        - {
            name: "Ubuntu GCC",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++"
          }
        - {
            name: "Ubuntu Clang",
            os: ubuntu-latest,
            cc: "clang",
            cxx: "clang++",
            publish_release: true,
            release_name: "linux-x86_64",
            release_extension: ".tar.xz",
            archive_command: "tar cvfJ"
          }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Settings vars for MSVC
      if: startsWith(matrix.config.name, 'Windows MSVC')
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.config.arch }}


    - name: Get latest LLVM version
      if: startsWith(matrix.config.name, 'Windows Clang')
      run: echo "LLVM_RELID=$((Invoke-WebRequest 'https://api.github.com/repos/llvm/llvm-project/releases/latest').Content | ConvertFrom-Json | Select-Object -ExpandProperty id)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Restore LLVM from cache
      if: startsWith(matrix.config.name, 'Windows Clang')
      id: llvm-cache
      uses: actions/cache@v2
      with:
        path: C:/Program Files/LLVM
        key: 'llvm-llvm-project-relid-${{ env.LLVM_RELID }}'

    - name: Downloading latest clang for Windows
      if: ${{ !steps.cache-primes.outputs.cache-hit && startsWith(matrix.config.name, 'Windows Clang') }}
      run: |
        Invoke-WebRequest -OutFile "LLVM.exe" ((Invoke-WebRequest "https://api.github.com/repos/llvm/llvm-project/releases/$($env:LLVM_RELID)").Content | ConvertFrom-Json | Select-Object -ExpandProperty assets | Where -Property name -Like "*win64.exe" | Select-Object -First 1).browser_download_url
        7z x LLVM.exe -y -o"C:/Program Files/LLVM"

    - name: Setting release name
      env:
        DESTDIR: ${{ format('openSeaChest-{0}-{1}', github.ref_name, matrix.config.release_name) }} 
      run: |
        echo "DESTDIR=${DESTDIR}" >> $GITHUB_ENV
      shell: bash

    - uses: actions/setup-python@v1

    - name: Configuring and compiling with meson
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        pip install meson==0.61.1 ninja
        meson setup build -Dprefix=/ -Dmandir=/man -Dbindir=/ --buildtype=release
        meson install -C build

    - name: Packing release
      env:
        ARCHIVE_EXT: ${{ matrix.config.release_extension }}
      if: ${{ startsWith(github.ref, 'refs/tags/v') && matrix.config.publish_release }} 
      run: |
        cd build
        ${{ matrix.config.archive_command }} "${DESTDIR}${ARCHIVE_EXT}" $DESTDIR
      shell: bash
  
    - name: Publish release
      if: ${{ startsWith(github.ref, 'refs/tags/v') && matrix.config.publish_release }} 
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ format('./build/{0}{1}', env.DESTDIR,  matrix.config.release_extension) }}
